{
  "address": "0x9D4184B69A8e0C29f72Aab43cE6924779fAaeBc1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IGovernor",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IHeart",
          "name": "_heart",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHeartDetails",
      "outputs": [
        {
          "internalType": "address[2]",
          "name": "",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[7]",
          "name": "",
          "type": "uint256[7]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "getBondDiscounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "getGovernanceProposals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heart",
      "outputs": [
        {
          "internalType": "contract IHeart",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "visor",
      "outputs": [
        {
          "internalType": "contract IHypervisor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "visor_full",
      "outputs": [
        {
          "internalType": "contract IHypervisor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6994e8eab8c678192208240890ba639616b4c6e5a995a6ab8c5a57d89d2563b1",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x9D4184B69A8e0C29f72Aab43cE6924779fAaeBc1",
    "transactionIndex": 156,
    "gasUsed": "1198285",
    "logsBloom": "0x
    "blockHash": "0xde34ed8757b60b4e010fbbb3b25060cde68d2d3943c819a4210ca9211e9c91bf",
    "transactionHash": "0x6994e8eab8c678192208240890ba639616b4c6e5a995a6ab8c5a57d89d2563b1",
    "logs": [],
    "blockNumber": 14474212,
    "cumulativeGasUsed": "10972637",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0xBEC3de5b14902C660Bd2C7EfD2F259998424cc24",
    "0x51e6775b7bE2eA1d20cA02cFEeB04453366e72C8"
  ],
  "numDeployments": 2,
  "solcInputHash": "52326babd87e7897610fb1d2a71f018c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IGovernor\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IHeart\",\"name\":\"_heart\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHeartDetails\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"getBondDiscounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getGovernanceProposals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heart\",\"outputs\":[{\"internalType\":\"contract IHeart\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visor\",\"outputs\":[{\"internalType\":\"contract IHypervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visor_full\",\"outputs\":[{\"internalType\":\"contract IHypervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Class that holds common view functions to retrieve heart and governance information effectively\",\"kind\":\"dev\",\"methods\":{},\"title\":\"HeartViewer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllHeartDetails()\":{\"notice\":\"Gets all the heart details in one view call\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/viewer/HeartViewer.sol\":\"HeartViewer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function updateGardenAffiliateRate(address _garden, uint256 _affiliateRate) external;\\n\\n    function addAffiliateReward(address _user, uint256 _reserveAmount) external;\\n\\n    function claimRewards() external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function gardenAffiliateRates(address _wantedAsset) external view returns (uint256);\\n\\n    function affiliateRewards(address _user) external view returns (uint256);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e2285b265f745aedc094f2bc91bec11a803073264b0a69565c443ddf3f60d6b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe546cde30af3487ba52198348b57b5c220e7febede40c861c46589b105e0a01a\",\"license\":\"MIT\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC1271} from '../interfaces/IERC1271.sol';\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IStrategyGarden\\n *\\n * Interface for functions of the garden\\n */\\ninterface IStrategyGarden {\\n    /* ============ Write ============ */\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function updateStrategyRewards(\\n        address _strategy,\\n        uint256 _newTotalAmount,\\n        uint256 _newCapitalReturned\\n    ) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n}\\n\\n/**\\n * @title IAdminGarden\\n *\\n * Interface for amdin functions of the Garden\\n */\\ninterface IAdminGarden {\\n    /* ============ Write ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function delegateVotes(address _token, address _address) external;\\n\\n    function updateCreators(address _newCreator, address[4] memory _newCreators) external;\\n\\n    function updateGardenParams(uint256[12] memory _newParams) external;\\n\\n    function verifyGarden(uint256 _verifiedCategory) external;\\n\\n    function resetHardlock(uint256 _hardlockStartsAt) external;\\n}\\n\\n/**\\n * @title IGarden\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface ICoreGarden {\\n    /* ============ Constructor ============ */\\n\\n    /* ============ View ============ */\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256 lastDepositAt,\\n            uint256 initialDepositAt,\\n            uint256 claimedAt,\\n            uint256 claimedBABL,\\n            uint256 claimedRewards,\\n            uint256 withdrawnSince,\\n            uint256 totalDeposits,\\n            uint256 nonce,\\n            uint256 lockedBalance\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function verifiedCategory() external view returns (uint256);\\n\\n    function canMintNftAfter() external view returns (uint256);\\n\\n    function hardlockStartsAt() external view returns (uint256);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n\\n    function lastPricePerShare() external view returns (uint256);\\n\\n    function lastPricePerShareTS() external view returns (uint256);\\n\\n    function pricePerShareDecayRate() external view returns (uint256);\\n\\n    function pricePerShareDelta() external view returns (uint256);\\n\\n    /* ============ Write ============ */\\n\\n    function deposit(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _to,\\n        address _referrer\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        address _to,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _signer,\\n        address _referrer,\\n        bytes memory signature\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        address _signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimAndStakeReturns(uint256 _minAmountOut, address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        address signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimAndStakeRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _nonceHeart,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _signer,\\n        bytes memory _signature\\n    ) external;\\n\\n    function stakeBySig(\\n        uint256 _amountIn,\\n        uint256 _profits,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _nonceHeart,\\n        uint256 _maxFee,\\n        address _to,\\n        uint256 _pricePerShare,\\n        address _signer,\\n        bytes memory _signature\\n    ) external;\\n\\n    function claimNFT() external;\\n}\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n}\\n\\ninterface IGarden is ICoreGarden, IAdminGarden, IStrategyGarden, IERC20, IERC20Metadata, IERC1271 {\\n    struct Contributor {\\n        uint256 lastDepositAt;\\n        uint256 initialDepositAt;\\n        uint256 claimedAt;\\n        uint256 claimedBABL;\\n        uint256 claimedRewards;\\n        uint256 withdrawnSince;\\n        uint256 totalDeposits;\\n        uint256 nonce;\\n        uint256 lockedBalance;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ea032ee07b911d91a6f907ef423acab84255a662cb08ca093c29047f935b06\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IHeart.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\nimport {IGarden} from './IGarden.sol';\\n\\n/**\\n * @title IHeart\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Heart\\n */\\ninterface IHeart {\\n    // View functions\\n\\n    function getVotedGardens() external view returns (address[] memory);\\n\\n    function heartGarden() external view returns (IGarden);\\n\\n    function getGardenWeights() external view returns (uint256[] memory);\\n\\n    function minAmounts(address _reserve) external view returns (uint256);\\n\\n    function assetToCToken(address _asset) external view returns (address);\\n\\n    function bondAssets(address _asset) external view returns (uint256);\\n\\n    function assetToLend() external view returns (address);\\n\\n    function assetForPurchases() external view returns (address);\\n\\n    function lastPumpAt() external view returns (uint256);\\n\\n    function lastVotesAt() external view returns (uint256);\\n\\n    function tradeSlippage() external view returns (uint256);\\n\\n    function weeklyRewardAmount() external view returns (uint256);\\n\\n    function bablRewardLeft() external view returns (uint256);\\n\\n    function getFeeDistributionWeights() external view returns (uint256[] memory);\\n\\n    function getTotalStats() external view returns (uint256[7] memory);\\n\\n    function votedGardens(uint256 _index) external view returns (address);\\n\\n    function gardenWeights(uint256 _index) external view returns (uint256);\\n\\n    function feeDistributionWeights(uint256 _index) external view returns (uint256);\\n\\n    function totalStats(uint256 _index) external view returns (uint256);\\n\\n    // Non-view\\n\\n    function pump() external;\\n\\n    function voteProposal(uint256 _proposalId, bool _isApprove) external;\\n\\n    function resolveGardenVotesAndPump(address[] memory _gardens, uint256[] memory _weights) external;\\n\\n    function resolveGardenVotes(address[] memory _gardens, uint256[] memory _weights) external;\\n\\n    function updateMarkets() external;\\n\\n    function setHeartGardenAddress(address _heartGarden) external;\\n\\n    function updateFeeWeights(uint256[] calldata _feeWeights) external;\\n\\n    function updateAssetToLend(address _assetToLend) external;\\n\\n    function updateAssetToPurchase(address _purchaseAsset) external;\\n\\n    function updateBond(address _assetToBond, uint256 _bondDiscount) external;\\n\\n    function lendFusePool(address _assetToLend, uint256 _lendAmount) external;\\n\\n    function borrowFusePool(address _assetToBorrow, uint256 _borrowAmount) external;\\n\\n    function repayFusePool(address _borrowedAsset, uint256 _amountToRepay) external;\\n\\n    function protectBABL(\\n        uint256 _bablPriceProtectionAt,\\n        uint256 _bablPrice,\\n        uint256 _pricePurchasingAsset,\\n        uint256 _slippage,\\n        address _hopToken\\n    ) external;\\n\\n    function trade(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount,\\n        uint256 _minAmount\\n    ) external;\\n\\n    function sellWantedAssetToHeart(address _assetToSell, uint256 _amountToSell) external;\\n\\n    function addReward(uint256 _bablAmount, uint256 _weeklyRate) external;\\n\\n    function setMinTradeAmount(address _asset, uint256 _minAmount) external;\\n\\n    function setTradeSlippage(uint256 _tradeSlippage) external;\\n\\n    function bondAsset(\\n        address _assetToBond,\\n        uint256 _amountToBond,\\n        uint256 _minAmountOut,\\n        address _referrer\\n    ) external;\\n\\n    function bondAssetBySig(\\n        address _assetToBond,\\n        uint256 _amountToBond,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _priceInBABL,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _contributor,\\n        address _referrer,\\n        bytes memory _signature\\n    ) external;\\n}\\n\",\"keccak256\":\"0x01c07506d34b851caf1de4c47010d5a42c382f6e829c7f4783a490680b24dfb2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IHypervisor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IHypervisor {\\n    // @param deposit0 Amount of token0 transfered from sender to Hypervisor\\n    // @param deposit1 Amount of token0 transfered from sender to Hypervisor\\n    // @param to Address to which liquidity tokens are minted\\n    // @return shares Quantity of liquidity tokens minted as a result of deposit\\n    function deposit(\\n        uint256 deposit0,\\n        uint256 deposit1,\\n        address to\\n    ) external returns (uint256);\\n\\n    // @param shares Number of liquidity tokens to redeem as pool assets\\n    // @param to Address to which redeemed pool assets are sent\\n    // @param from Address from which liquidity tokens are sent\\n    // @return amount0 Amount of token0 redeemed by the submitted liquidity tokens\\n    // @return amount1 Amount of token1 redeemed by the submitted liquidity tokens\\n    function withdraw(\\n        uint256 shares,\\n        address to,\\n        address from\\n    ) external returns (uint256, uint256);\\n\\n    function rebalance(\\n        int24 _baseLower,\\n        int24 _baseUpper,\\n        int24 _limitLower,\\n        int24 _limitUpper,\\n        address _feeRecipient,\\n        int256 swapQuantity\\n    ) external;\\n\\n    function addBaseLiquidity(uint256 amount0, uint256 amount1) external;\\n\\n    function addLimitLiquidity(uint256 amount0, uint256 amount1) external;\\n\\n    function pullLiquidity(uint256 shares)\\n        external\\n        returns (\\n            uint256 base0,\\n            uint256 base1,\\n            uint256 limit0,\\n            uint256 limit1\\n        );\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function pool() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\n\\n    function pendingFees() external returns (uint256 fees0, uint256 fees1);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\\n\\n    function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\\n\\n    function appendList(address[] memory listed) external;\\n\\n    function toggleWhitelist() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd1dc5aeeb7676a4a5cdbc30813a4056e2d656c162f81252e2fc0a575242336e7\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/external/oz/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/IGovernor.sol)\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor {\\n    enum ProposalState {Pending, Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed}\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    function proposals(uint256 _proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x571ccb40c907e376f675f02f442c0ce32010d92c14ee4b270cc448aad2b4b379\",\"license\":\"MIT\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfb8440b3c915eb148e4ef721ce6b240642a8c35c3f8729dc6d20db9f307b4cae\",\"license\":\"Apache-2.0\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/viewer/HeartViewer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IHeart} from '../interfaces/IHeart.sol';\\nimport {IHypervisor} from '../interfaces/IHypervisor.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IGovernor} from '../interfaces/external/oz/IGovernor.sol';\\n\\nimport {LowGasSafeMath as SafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ControllerLib} from '../lib/ControllerLib.sol';\\n\\n/**\\n * @title HeartViewer\\n * @author Babylon Finance\\n *\\n * Class that holds common view functions to retrieve heart and governance information effectively\\n */\\ncontract HeartViewer {\\n    using SafeMath for uint256;\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Variables ============ */\\n\\n    IBabController public immutable controller;\\n    IGovernor public immutable governor;\\n    IHeart public immutable heart;\\n    IHypervisor public constant visor = IHypervisor(0xF19F91d7889668A533F14d076aDc187be781a458);\\n    IHypervisor public constant visor_full = IHypervisor(0x5e6c481dE496554b66657Dd1CA1F70C61cf11660);\\n\\n    /* ============ External function  ============ */\\n\\n    constructor(\\n        IBabController _controller,\\n        IGovernor _governor,\\n        IHeart _heart\\n    ) {\\n        require(address(_controller) != address(0), 'Controller must exist');\\n        require(address(_governor) != address(0), 'Governor must exist');\\n\\n        controller = _controller;\\n        governor = _governor;\\n        heart = _heart;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Gets all the heart details in one view call\\n     */\\n    function getAllHeartDetails()\\n        external\\n        view\\n        returns (\\n            address[2] memory, // address of the heart garden\\n            uint256[7] memory, // total stats\\n            uint256[] memory, // fee weights\\n            address[] memory, // voted gardens\\n            uint256[] memory, // garden weights\\n            uint256[2] memory, // weekly babl reward\\n            uint256[2] memory, // dates\\n            uint256[2] memory // liquidity\\n        )\\n    {\\n        (uint256 wethAmount, uint256 bablAmount) = visor.getTotalAmounts();\\n        (uint256 wethAmountF, uint256 bablAmountF) = visor_full.getTotalAmounts();\\n\\n        return (\\n            [address(heart.heartGarden()), heart.assetToLend()],\\n            heart.getTotalStats(),\\n            heart.getFeeDistributionWeights(),\\n            heart.getVotedGardens(),\\n            heart.getGardenWeights(),\\n            [heart.bablRewardLeft(), heart.weeklyRewardAmount()],\\n            [heart.lastPumpAt(), heart.lastVotesAt()],\\n            [wethAmount.add(wethAmountF), bablAmount.add(bablAmountF)]\\n        );\\n    }\\n\\n    function getBondDiscounts(address[] calldata _assets) external view returns (uint256[] memory) {\\n        uint256[] memory discounts = new uint256[](_assets.length);\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            discounts[i] = heart.bondAssets(_assets[i]);\\n        }\\n        return discounts;\\n    }\\n\\n    function getGovernanceProposals(uint256[] calldata _ids)\\n        external\\n        view\\n        returns (\\n            address[] memory, // proposers\\n            uint256[] memory, // endBlocks\\n            uint256[] memory, // for votes - against votes\\n            uint256[] memory // state\\n        )\\n    {\\n        address[] memory proposers = new address[](_ids.length);\\n        uint256[] memory endBlocks = new uint256[](_ids.length);\\n        uint256[] memory votesA = new uint256[](_ids.length);\\n        uint256[] memory stateA = new uint256[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            (address proposer, uint256[3] memory data) = _getProposalInfo(_ids[i]);\\n            proposers[i] = proposer;\\n            endBlocks[i] = data[0];\\n            votesA[i] = data[1];\\n            stateA[i] = data[2];\\n        }\\n        return (proposers, endBlocks, votesA, stateA);\\n    }\\n\\n    /* ============ Private Functions ============ */\\n\\n    function _getProposalInfo(uint256 _proposalId) internal view returns (address, uint256[3] memory) {\\n        (, address proposer, , , uint256 endBlock, uint256 forVotes, uint256 againstVotes, , , ) =\\n            governor.proposals(_proposalId);\\n        return (proposer, [endBlock, forVotes.sub(againstVotes), uint256(governor.state(_proposalId))]);\\n    }\\n}\\n\",\"keccak256\":\"0xce2553ae43462b127fbe5a84c904f814b35a4991ab19027f11f21f04364ae53a\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620016b1380380620016b18339810160408190526200003491620000b7565b6001600160a01b038316620000665760405162461bcd60e51b81526004016200005d906200010a565b60405180910390fd5b6001600160a01b0382166200008f5760405162461bcd60e51b81526004016200005d9062000141565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c05262000191565b600080600060608486031215620000cc578283fd5b8351620000d98162000178565b6020850151909350620000ec8162000178565b6040850151909250620000ff8162000178565b809150509250925092565b60208082526015908201527f436f6e74726f6c6c6572206d7573742065786973740000000000000000000000604082015260600190565b60208082526013908201527f476f7665726e6f72206d75737420657869737400000000000000000000000000604082015260600190565b6001600160a01b03811681146200018e57600080fd5b50565b60805160601c60a05160601c60c05160601c6114a9620002086000398061029e528061034652806103ec528061047d528061051252806105a7528061064752806106dd528061077c52806108125280610b515280610c3652508061012c5280610c9e5280610d73525080610c5a52506114a96000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d551723e1161005b578063d551723e146100f2578063df822edf146100fa578063f58d1c941461011a578063f77c47911461012257610088565b80630c340a241461008d5780630c75b1d8146100ab57806371802996146100c75780639bb1f644146100ea575b600080fd5b61009561012a565b6040516100a291906112d9565b60405180910390f35b6100b361014e565b6040516100a29897969594939291906112ed565b6100da6100d5366004611089565b6108e8565b6040516100a294939291906113a5565b610095610acc565b610095610ae4565b61010d610108366004610f2f565b610afc565b6040516100a291906113fd565b610095610c34565b610095610c58565b7f000000000000000000000000000000000000000000000000000000000000000081565b610156610e38565b61015e610e56565b606080606061016b610e38565b610173610e38565b61017b610e38565b60008073f19f91d7889668a533f14d076adc187be781a4586001600160a01b031663c4a7761e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156101ca57600080fd5b505afa1580156101de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020291906111f8565b91509150600080735e6c481de496554b66657dd1ca1f70c61cf116606001600160a01b031663c4a7761e6040518163ffffffff1660e01b8152600401604080518083038186803b15801561025557600080fd5b505afa158015610269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028d91906111f8565b9150915060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f6486040518163ffffffff1660e01b815260040160206040518083038186803b1580156102f557600080fd5b505afa158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610f13565b6001600160a01b03166001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636be2f2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190610f13565b6001600160a01b03166001600160a01b03168152507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc5cbf1d6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561044357600080fd5b505afa158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b919061100d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663564e4bab6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104d457600080fd5b505afa1580156104e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051091908101906110b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663081ab4c26040518163ffffffff1660e01b815260040160006040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a59190810190610f6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfd2dc996040518163ffffffff1660e01b815260040160006040518083038186803b1580156105fe57600080fd5b505afa158015610612573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261063a91908101906110b1565b60405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a775efa56040518163ffffffff1660e01b815260040160206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190611154565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dac5a9956040518163ffffffff1660e01b815260040160206040518083038186803b15801561073457600080fd5b505afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190611154565b81525060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663394abf456040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d357600080fd5b505afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190611154565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663730fa8c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190611154565b905260408051808201909152806108b88d8c610c7c565b81526020016108c78c8b610c7c565b8152509b509b509b509b509b509b509b509b50505050509091929394959697565b606080808060008567ffffffffffffffff8111801561090657600080fd5b50604051908082528060200260200182016040528015610930578160200160208202803683370190505b50905060008667ffffffffffffffff8111801561094c57600080fd5b50604051908082528060200260200182016040528015610976578160200160208202803683370190505b50905060008767ffffffffffffffff8111801561099257600080fd5b506040519080825280602002602001820160405280156109bc578160200160208202803683370190505b50905060008867ffffffffffffffff811180156109d857600080fd5b50604051908082528060200260200182016040528015610a02578160200160208202803683370190505b50905060005b89811015610abb57600080610a2e8d8d85818110610a2257fe5b90506020020135610c8c565b9150915081878481518110610a3f57fe5b6001600160a01b03929092166020928302919091019091015280518651879085908110610a6857fe5b60209081029190910101528060016020020151858481518110610a8757fe5b60209081029190910101528060026020020151848481518110610aa657fe5b60209081029190910101525050600101610a08565b509299919850965090945092505050565b735e6c481de496554b66657dd1ca1f70c61cf1166081565b73f19f91d7889668a533f14d076adc187be781a45881565b606060008267ffffffffffffffff81118015610b1757600080fd5b50604051908082528060200260200182016040528015610b41578160200160208202803683370190505b50905060005b83811015610c2a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4bd694a868684818110610b8a57fe5b9050602002016020810190610b9f9190610ef0565b6040518263ffffffff1660e01b8152600401610bbb91906112d9565b60206040518083038186803b158015610bd357600080fd5b505afa158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b9190611154565b828281518110610c1757fe5b6020908102919091010152600101610b47565b5090505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b80820182811015610c2e57600080fd5b6000610c96610e74565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663013cf08b886040518263ffffffff1660e01b8152600401610ce89190611410565b6101406040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d39919061116c565b5050509650965096505050945050836040518060600160405280858152602001610d6c8486610e2890919063ffffffff16565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633e4f49e68b6040518263ffffffff1660e01b8152600401610dbd9190611410565b60206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190611135565b6007811115610e1857fe5b8152509550955050505050915091565b80820382811115610c2e57600080fd5b60405180604001604052806002906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112610ea3578182fd5b50813567ffffffffffffffff811115610eba578182fd5b6020830191508360208083028501011115610ed457600080fd5b9250929050565b80518015158114610eeb57600080fd5b919050565b600060208284031215610f01578081fd5b8135610f0c8161145b565b9392505050565b600060208284031215610f24578081fd5b8151610f0c8161145b565b60008060208385031215610f41578081fd5b823567ffffffffffffffff811115610f57578182fd5b610f6385828601610e92565b90969095509350505050565b60006020808385031215610f81578182fd5b825167ffffffffffffffff811115610f97578283fd5b8301601f81018513610fa7578283fd5b8051610fba610fb58261143d565b611419565b8181528381019083850185840285018601891015610fd6578687fd5b8694505b83851015611001578051610fed8161145b565b835260019490940193918501918501610fda565b50979650505050505050565b600060e0828403121561101e578081fd5b82601f83011261102c578081fd5b60405160e0810181811067ffffffffffffffff8211171561104957fe5b604052808360e0810186101561105d578384fd5b835b600781101561107e57815183526020928301929091019060010161105f565b509195945050505050565b6000806020838503121561109b578182fd5b823567ffffffffffffffff811115610f57578283fd5b600060208083850312156110c3578182fd5b825167ffffffffffffffff8111156110d9578283fd5b8301601f810185136110e9578283fd5b80516110f7610fb58261143d565b8181528381019083850185840285018601891015611113578687fd5b8694505b83851015611001578051835260019490940193918501918501611117565b600060208284031215611146578081fd5b815160088110610f0c578182fd5b600060208284031215611165578081fd5b5051919050565b6000806000806000806000806000806101408b8d03121561118b578586fd5b8a51995060208b015161119d8161145b565b8099505060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506111d86101008c01610edb565b91506111e76101208c01610edb565b90509295989b9194979a5092959850565b6000806040838503121561120a578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156112535781516001600160a01b03168752958201959082019060010161122e565b509495945050505050565b8060005b6002811015611281578151845260209384019390910190600101611262565b50505050565b8060005b600781101561128157815184526020938401939091019060010161128b565b6000815180845260208085019450808401835b83811015611253578151875295820195908201906001016112bd565b6001600160a01b0391909116815260200190565b6000610240828b835b600281101561131e5781516001600160a01b03168352602092830192909101906001016112f6565b50505061132e604084018b611287565b806101208401526113418184018a6112aa565b9050828103610140840152611356818961121b565b905082810361016084015261136b81886112aa565b91505061137c61018083018661125e565b61138a6101c083018561125e565b61139861020083018461125e565b9998505050505050505050565b6000608082526113b8608083018761121b565b82810360208401526113ca81876112aa565b905082810360408401526113de81866112aa565b905082810360608401526113f281856112aa565b979650505050505050565b600060208252610f0c60208301846112aa565b90815260200190565b60405181810167ffffffffffffffff8111828210171561143557fe5b604052919050565b600067ffffffffffffffff82111561145157fe5b5060209081020190565b6001600160a01b038116811461147057600080fd5b5056fea26469706673582212209d4d1f41a53a29f145c488e88d9d1b28fb381102b8118966e01d400d6159e70264736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Babylon Finance Class that holds common view functions to retrieve heart and governance information effectively",
    "kind": "dev",
    "methods": {},
    "title": "HeartViewer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAllHeartDetails()": {
        "notice": "Gets all the heart details in one view call"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}